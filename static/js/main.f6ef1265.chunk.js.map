{"version":3,"sources":["assets/img/original.png","components/Header/Header.js","components/ModalContainer/ModalContainer.js","components/FromSendTweet/FormSendTweet.js","utils/constants.js","components/SendTweet/SendTweet.js","components/Tweet/Tweet.js","components/ListTweets/ListTweets.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","TwitterLogo","alt","ModalContainer","props","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onSubmit","event","onChange","target","value","FormControl","FormGroup","TextField","type","placeholder","margin","multiline","rows","Button","variant","color","style","background","SendTweet","setToastProps","allTweets","setIsOpenModal","Fab","aria-label","onClick","preventDefault","allTweetsArray","time","moment","push","localStorage","setItem","JSON","stringify","text","console","log","Tweet","index","deleteTweet","Card","CardContent","format","ListTweets","length","Grid","container","spacing","map","key","item","xs","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","AllTweetsStorage","getItem","parse","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f6ef1265.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/original.400dc885.png\";","import React from \"react\";\r\nimport TwitterLogo from \"../../assets/img/original.png\";\r\n\r\nimport \"./Header.scss\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <img src={TwitterLogo} alt=\"Tweets Simulator\" />\r\n      <h1>Tweets Simulator</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport \"./ModalContainer.scss\";\r\nexport default function ModalContainer(props) {\r\n  const { isOpenModal, closeModal, children } = props;\r\n  return (\r\n    <Modal\r\n      className=\"modal-container\"\r\n      open={isOpenModal}\r\n      onClose={closeModal}\r\n      closeAfterTransition\r\n    >\r\n      <div>{children}</div>\r\n    </Modal>\r\n  );\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { FormControl, FormGroup, TextField, Button } from \"@material-ui/core\"\r\n\r\nimport \"./FormSendTweet.scss\"\r\n\r\nexport default function FormSendTweet(props) {\r\n  const { sendTweet } = props\r\n  const [formValue, setFormValue] = useState({\r\n    name: \"\",\r\n    tweet: \"\",\r\n  })\r\n\r\n  const onFormChange = (event) => {\r\n    setFormValue({\r\n      ...formValue,\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-send-tweet\">\r\n      <h2 className=\"form-send-tweet__title\">Enviar Tweet</h2>\r\n      <form\r\n        className=\"form-send-tweet__form\"\r\n        onSubmit={(event) => sendTweet(event, formValue)}\r\n        onChange={onFormChange}\r\n      >\r\n        <FormControl>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-name\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Nombre de usuario\"\r\n              margin=\"normal\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <TextField\r\n              className=\"form-send-tweet__form-textarea\"\r\n              name=\"tweet\"\r\n              multiline\r\n              rows=\"6\"\r\n              placeholder=\"Escribe tu tweet..\"\r\n              margin=\"normal\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ background: \"#005677\" }}\r\n            >\r\n              Enviar Tweet\r\n            </Button>\r\n          </FormGroup>\r\n        </FormControl>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","export const TWEETS_STORAGE = \"tweet-lt\";\r\n","import React, { useState } from \"react\"\r\nimport { Fab } from \"@material-ui/core\"\r\nimport AddIcon from \"@material-ui/icons/Add\"\r\nimport moment from \"moment\"\r\nimport ModalContainer from \"../ModalContainer\"\r\nimport FormSendTweet from \"../FromSendTweet\"\r\nimport { TWEETS_STORAGE } from \"../../utils/constants\"\r\nimport CloseIcon from \"@material-ui/icons/Close\"\r\n\r\nimport \"./SendTweet.scss\"\r\n\r\nexport default function SendTweet(props) {\r\n  const { setToastProps, allTweets } = props\r\n  const [isOpenModal, setIsOpenModal] = useState(false)\r\n\r\n  const openModal = () => {\r\n    setIsOpenModal(true)\r\n  }\r\n\r\n  const closeModal = () => {\r\n    setIsOpenModal(false)\r\n  }\r\n\r\n  const sendTweet = (event, formValue) => {\r\n    event.preventDefault()\r\n    const { name, tweet } = formValue\r\n    let allTweetsArray = []\r\n    if (allTweets) {\r\n      allTweetsArray = allTweets\r\n    }\r\n    if (!name || !tweet) {\r\n      console.log(\"Los campos son obligatorios\")\r\n      setToastProps({\r\n        open: true,\r\n        text: \"Error!..Los campos son obligatorios.\",\r\n      })\r\n    } else {\r\n      formValue.time = moment()\r\n      allTweetsArray.push(formValue)\r\n      localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweetsArray))\r\n      setToastProps({\r\n        open: true,\r\n        text: \"Tweet enviado correctamente.\",\r\n      })\r\n      closeModal()\r\n    }\r\n    allTweetsArray = []\r\n  }\r\n\r\n  return (\r\n    <div className=\"send-tweet\">\r\n      <Fab\r\n        className=\"send-tweet__open-modal\"\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        onClick={openModal}\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      <ModalContainer isOpenModal={isOpenModal} closeModal={closeModal}>\r\n        <CloseIcon className=\"send-tweet__close-modal\" onClick={closeModal} />\r\n        <FormSendTweet sendTweet={sendTweet} />\r\n      </ModalContainer>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./Tweet.scss\";\r\n\r\nexport default function Tweet(props) {\r\n  const {\r\n    tweet: { name, tweet, time },\r\n    index,\r\n    deleteTweet,\r\n  } = props;\r\n  return (\r\n    <Card className=\"Tweet\">\r\n      <CardContent>\r\n        <div className=\"tweet__header\">\r\n          <h5>{name}</h5>\r\n          <DeleteTwoToneIcon onClick={() => deleteTweet(index)} />\r\n        </div>\r\n        <p>{tweet}</p>\r\n        <div className=\"tweet__date-add-tweet\">\r\n          {moment(time).format(\"DD/MM/YYYY HH:mm\")}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Tweet from \"../Tweet\";\r\n\r\nimport \"./ListTweets.scss\";\r\n\r\nexport default function ListTweets(props) {\r\n  const { allTweets, deleteTweet } = props;\r\n  if (!allTweets || allTweets.length === 0) {\r\n    return (\r\n      <div className=\"list-tweets-empty\">\r\n        <h2>No hay tweets</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3} className=\"list-tweets\">\r\n      {allTweets.map((tweet, index) => (\r\n        <Grid key={index} item xs={4}>\r\n          <Tweet tweet={tweet} index={index} deleteTweet={deleteTweet} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Snackbar } from \"@material-ui/core\";\r\nimport Header from \"./components/Header\";\r\nimport SendTweet from \"./components/SendTweet\";\r\nimport { TWEETS_STORAGE } from \"./utils/constants\";\r\nimport ListTweets from \"./components/ListTweets\";\r\n\r\nfunction App() {\r\n  const [toastProps, setToastProps] = useState({\r\n    open: false,\r\n    text: null,\r\n  });\r\n  const [allTweets, setAllTweets] = useState([]);\r\n  const [reloadTweets, setReloadTweets] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const AllTweetsStorage = localStorage.getItem(TWEETS_STORAGE);\r\n    const allTweetsArray = JSON.parse(AllTweetsStorage);\r\n    setAllTweets(allTweetsArray);\r\n    setReloadTweets(false);\r\n  }, [reloadTweets]);\r\n\r\n  const deleteTweet = (index) => {\r\n    allTweets.splice(index, 1);\r\n    setAllTweets(allTweets);\r\n    localStorage.setItem(TWEETS_STORAGE, JSON.stringify(allTweets));\r\n    setReloadTweets(true);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"tweets-simulator\" maxWidth={false}>\r\n      <Header />\r\n      <SendTweet setToastProps={setToastProps} allTweets={allTweets} />\r\n      <ListTweets allTweets={allTweets} deleteTweet={deleteTweet} />\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\",\r\n        }}\r\n        open={toastProps.open}\r\n        autoHideDuration={1000}\r\n        message={<span id=\"message-id\">{toastProps.text} </span>}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}